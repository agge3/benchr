import type { ResultView, Language } from '~/types/benchmark';
import { OverviewView } from '~/components/benchmark/results/Overview';
import { ExecutionView } from '~/components/benchmark/results/Execution';
import { PerformanceView } from '~/components/benchmark/results/Performance';
import { CompilationView } from '~/components/benchmark/results/Compilation';
import { SystemView } from '~/components/benchmark/results/System';
import { BytecodeView } from '~/components/benchmark/results/Bytecode';
import { supportsBytecode } from '~/utils/format';

/**
 * Configuration for a single result view tab
 */
export interface ViewConfig {
  id: ResultView;
  label: string;
  component: React.ComponentType<any>;
  isAvailable?: (language: Language) => boolean;
  description?: string;
}

/**
 * Centralized view configuration
 * Add new views here instead of modifying ResultsPanel logic
 */
export const VIEW_CONFIGS: ViewConfig[] = [
  {
    id: 'overview',
    label: 'Overview',
    component: OverviewView,
    description: 'High-level summary of benchmark results',
  },
  {
    id: 'execution',
    label: 'Execution',
    component: ExecutionView,
    description: 'Detailed execution metrics and timing',
  },
  {
    id: 'performance',
    label: 'Performance',
    component: PerformanceView,
    description: 'Performance analysis and statistics',
  },
  {
    id: 'compilation',
    label: 'Compilation',
    component: CompilationView,
    description: 'Compilation output and errors',
  },
  {
    id: 'system',
    label: 'System',
    component: SystemView,
    description: 'System resources and environment',
  },
  {
    id: 'bytecode',
    label: 'Bytecode',
    component: BytecodeView,
    isAvailable: (language: Language) => supportsBytecode(language),
    description: 'Generated bytecode inspection',
  },
];

/**
 * Helper to get available views for a given language
 */
export function getAvailableViews(language: Language): ViewConfig[] {
  return VIEW_CONFIGS.filter(
    view => !view.isAvailable || view.isAvailable(language)
  );
}

/**
 * Helper to get a specific view config by ID
 */
export function getViewConfig(viewId: ResultView): ViewConfig | undefined {
  return VIEW_CONFIGS.find(v => v.id === viewId);
}
